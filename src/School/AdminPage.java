/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package School;

import java.awt.Color;
import java.awt.Font;
import java.awt.event.KeyEvent;
import java.sql.*;
import java.text.SimpleDateFormat;
import java.time.*;
import java.util.logging.*;
import javax.swing.*;
import javax.swing.table.*;


/**
 *
 * @author Kajamohan
 */
public class AdminPage extends javax.swing.JFrame {

    /**
     * Creates new form AdminPage
     */
    private String userName,password;
    private final ConnectDatabase database = new ConnectDatabase();
    private int posX, posY;
    private ResultSet rs;
    SimpleDateFormat Date_Format = new SimpleDateFormat("yyyy-MM-dd");
    
    public AdminPage() throws SQLException {
        initComponents();
        initialSetting();
        setStaffsDetais();
        setStudentsDetais();
        setReportDetais();
    }
    
    /*
    *   Setting for the Table Header and Hide some Buttons
    *   Report Details Table / Staffs Details Table / Students details Table
    *   View Button / Modify or Update Buttoon / Teacher list or Class List Button
    */
    private void initialSetting(){
        HeaderSetting h1 =  new HeaderSetting();
        h1.theader(ReportDetailsTable.getTableHeader());  
        h1.HeaderRenderer(ReportDetailsTable);

        HeaderSetting h2 =  new HeaderSetting();
        h2.theader(StaffsTable.getTableHeader());  
        h2.HeaderRenderer(StaffsTable);
        
        HeaderSetting h3 =  new HeaderSetting();
        h3.theader(StudentTable.getTableHeader());  
        h3.HeaderRenderer(StudentTable);
        
        HeaderSetting h4 =  new HeaderSetting();
        h4.theader(Timetable.getTableHeader());  
        h4.HeaderRenderer(Timetable);
       
        ViewBtn.setVisible(false);
        modifyBtn.setVisible(false);
        DeleteBtn.setVisible(false);
        teacherOrClass.setVisible(false);
        
        ViewBtn1.setVisible(false);
        modifyBtn1.setVisible(false);
        DeleteBtn1.setVisible(false);

        
        StaffsTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        StudentTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        ReportDetailsTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
    }
    
    /*
    *   Set the user Details in - My Account Tab
    *   Userid / Password / Username / Role / Gender / Date of Birth / Appoinment Date / Email / Mobile Number / NIC / Address
    */
    public void setUserDetails(String UN, String PWD) throws SQLException{    
        userName = UN;
        password = PWD;
              
        String recivedValue [] = database.getDetails(UN,"admintab");
        // Set vaues in My Account
        IdTxt.setText(recivedValue[0]);
        AdminPass.setText(password);
        NameTxt.setText(recivedValue[1]);        
        userNameDisplay.setText(recivedValue[1]); 
        
        RoleTxt.setText(recivedValue[2]);
        GenTxt.setText(recivedValue[3]);
        DobTxt.setText(recivedValue[4]);
        AppoimentTxt.setText(recivedValue[5]);
        EmailTxt.setText(recivedValue[6]);
        MobileTxt.setText(recivedValue[7]);
        NicTxt.setText(recivedValue[8]);        
        AddressTxt.setText(recivedValue[9]);
        setValues();
    }
    
    /*
    *   Set the user Details in - Manage Account Tab
    *   Userid / Password / Username / Role / Gender / Date of Birth / Appoinment Date / Email / Mobile Number / NIC / Address
    */
    private void setValues() throws SQLException{
        // Set values in Manage Account
        StaffID.setText(userName);
        StaffPassword.setText(password);
        StaffName.setText(NameTxt.getText());
        StaffRole.setText(RoleTxt.getText());
        
        if(GenTxt.toString().contains("female"))
            StaffGender.setSelectedIndex(2);
        else
            StaffGender.setSelectedIndex(1);
        
        StaffEmail.setText(EmailTxt.getText());
        StaffMobile.setText(MobileTxt.getText());
        StaffNIC.setText(NicTxt.getText());
        StaffAddress.setText(AddressTxt.getText());
        DoBUpdate.setDate(ConnectDatabase.DOBdate);
        AppoimentUpdate.setDate(ConnectDatabase.APPOIMENTdate);
    }
    
    
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings({"unchecked", "deprecation"})
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFrame1 = new javax.swing.JFrame();
        AdminTab = new javax.swing.JPanel();
        userNameDisplay = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        LogoutBtn = new javax.swing.JButton();
        AdminMain = new javax.swing.JTabbedPane();
        MyAccScrollPane = new javax.swing.JScrollPane();
        MyAccPane = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        MobileTxt = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        NicTxt = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        DobTxt = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        AppoimentTxt = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        RoleTxt = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        IdTxt = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        NameTxt = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        HideViewBtn = new javax.swing.JToggleButton();
        EmailTxt = new javax.swing.JLabel();
        AdminPass = new javax.swing.JPasswordField();
        UpdateOrChangeBtn = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        GenTxt = new javax.swing.JLabel();
        jScrollPane7 = new javax.swing.JScrollPane();
        AddressTxt = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        jPanel4 = new javax.swing.JPanel();
        AddTimeTableBtn = new javax.swing.JButton();
        AddStudentBtn = new javax.swing.JButton();
        AddStaffBtn = new javax.swing.JButton();
        AddSubjectBtn = new javax.swing.JButton();
        AddClass = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jPanel2 = new javax.swing.JPanel();
        jLabel25 = new javax.swing.JLabel();
        jScrollPane8 = new javax.swing.JScrollPane();
        StaffsTable = new javax.swing.JTable();
        jLabel27 = new javax.swing.JLabel();
        searchStaff = new javax.swing.JTextField();
        ViewBtn = new javax.swing.JButton();
        modifyBtn = new javax.swing.JButton();
        DeleteBtn = new javax.swing.JButton();
        RefreshIcon = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        jPanel5 = new javax.swing.JPanel();
        jLabel26 = new javax.swing.JLabel();
        jScrollPane11 = new javax.swing.JScrollPane();
        StudentTable = new javax.swing.JTable();
        RefreshIcon2 = new javax.swing.JButton();
        jLabel28 = new javax.swing.JLabel();
        StudentSearch = new javax.swing.JTextField();
        ViewBtn1 = new javax.swing.JButton();
        modifyBtn1 = new javax.swing.JButton();
        DeleteBtn1 = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        jPanel6 = new javax.swing.JPanel();
        SelectTimetableType = new javax.swing.JComboBox<>();
        YearTerm = new javax.swing.JLabel();
        jScrollPane9 = new javax.swing.JScrollPane();
        Timetable = new javax.swing.JTable();
        teacherOrClass = new javax.swing.JComboBox<>();
        jScrollPane6 = new javax.swing.JScrollPane();
        jPanel7 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        ReportDetailsTable = new javax.swing.JTable();
        jLabel12 = new javax.swing.JLabel();
        ManageAccScrollPane = new javax.swing.JScrollPane();
        jPanel3 = new javax.swing.JPanel();
        StaffEmail = new javax.swing.JTextField();
        StaffPassword = new javax.swing.JPasswordField();
        StaffMobile = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        StaffNIC = new javax.swing.JTextField();
        jLabel22 = new javax.swing.JLabel();
        jScrollPane10 = new javax.swing.JScrollPane();
        StaffAddress = new javax.swing.JTextArea();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        StaffID = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        StaffName = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        StaffRole = new javax.swing.JTextField();
        HideViewBtn1 = new javax.swing.JToggleButton();
        StaffGender = new javax.swing.JComboBox<>();
        UpdateBtn = new javax.swing.JButton();
        DoBUpdate = new com.toedter.calendar.JDateChooser();
        AppoimentUpdate = new com.toedter.calendar.JDateChooser();

        javax.swing.GroupLayout jFrame1Layout = new javax.swing.GroupLayout(jFrame1.getContentPane());
        jFrame1.getContentPane().setLayout(jFrame1Layout);
        jFrame1Layout.setHorizontalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jFrame1Layout.setVerticalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Admin");
        setBackground(new java.awt.Color(153, 255, 204));
        setUndecorated(true);
        setResizable(false);

        AdminTab.setBackground(new java.awt.Color(255, 255, 255));
        AdminTab.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 102, 102), 7, true));
        AdminTab.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                AdminTabMouseDragged(evt);
            }
        });
        AdminTab.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                AdminTabMousePressed(evt);
            }
        });

        userNameDisplay.setFont(new java.awt.Font("Times New Roman", 1, 20)); // NOI18N
        userNameDisplay.setForeground(new java.awt.Color(0, 153, 0));
        userNameDisplay.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        userNameDisplay.setText("AdminName");

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 30)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 102, 204));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("School Management System");

        LogoutBtn.setBackground(new java.awt.Color(255, 102, 102));
        LogoutBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/School/Icons/logout.png"))); // NOI18N
        LogoutBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LogoutBtnActionPerformed(evt);
            }
        });

        AdminMain.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createEtchedBorder(), new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED)));
        AdminMain.setTabPlacement(javax.swing.JTabbedPane.LEFT);
        AdminMain.setFont(new java.awt.Font("Times New Roman", 0, 30)); // NOI18N
        AdminMain.setInheritsPopupMenu(true);

        MyAccPane.setBackground(new java.awt.Color(255, 255, 255));
        MyAccPane.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 10, true));

        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(102, 102, 102));
        jLabel2.setText("Your ID :");

        MobileTxt.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        MobileTxt.setForeground(new java.awt.Color(153, 153, 153));

        jLabel3.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(102, 102, 102));
        jLabel3.setText("Your Password :");

        NicTxt.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        NicTxt.setForeground(new java.awt.Color(153, 153, 153));

        jLabel4.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(102, 102, 102));
        jLabel4.setText("Name :");

        DobTxt.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        DobTxt.setForeground(new java.awt.Color(153, 153, 153));

        jLabel5.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(102, 102, 102));
        jLabel5.setText("Email ID :");

        AppoimentTxt.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        AppoimentTxt.setForeground(new java.awt.Color(153, 153, 153));

        jLabel6.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(102, 102, 102));
        jLabel6.setText("Mobile Number :");

        RoleTxt.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        RoleTxt.setForeground(new java.awt.Color(153, 153, 153));

        jLabel7.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(102, 102, 102));
        jLabel7.setText("NIC Number :");

        jLabel8.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(102, 102, 102));
        jLabel8.setText("Date of Birth :");

        IdTxt.setBackground(new java.awt.Color(204, 255, 255));
        IdTxt.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        IdTxt.setForeground(new java.awt.Color(153, 153, 153));
        IdTxt.setOpaque(true);

        jLabel9.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(102, 102, 102));
        jLabel9.setText("Appoiment Date :");

        NameTxt.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        NameTxt.setForeground(new java.awt.Color(153, 153, 153));

        jLabel10.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(102, 102, 102));
        jLabel10.setText("Gender :");

        jLabel11.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(102, 102, 102));
        jLabel11.setText("Address :");
        jLabel11.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        HideViewBtn.setForeground(new java.awt.Color(0, 204, 0));
        HideViewBtn.setIcon(new javax.swing.ImageIcon("F:\\UINVERSITY OF JAFFNA NOTES\\5th Semester\\SQL Project\\SchoolManagementSystem\\src\\School\\Icons\\hide.png")); // NOI18N
        HideViewBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HideViewBtnActionPerformed(evt);
            }
        });

        EmailTxt.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        EmailTxt.setForeground(new java.awt.Color(153, 153, 153));
        EmailTxt.setAutoscrolls(true);

        AdminPass.setEditable(false);
        AdminPass.setBackground(new java.awt.Color(204, 255, 255));
        AdminPass.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        AdminPass.setForeground(new java.awt.Color(153, 153, 153));
        AdminPass.setBorder(null);
        AdminPass.setFocusable(false);

        UpdateOrChangeBtn.setBackground(new java.awt.Color(0, 102, 102));
        UpdateOrChangeBtn.setFont(new java.awt.Font("Times New Roman", 1, 36)); // NOI18N
        UpdateOrChangeBtn.setText("Update/Change");
        UpdateOrChangeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateOrChangeBtnActionPerformed(evt);
            }
        });

        jLabel13.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(102, 102, 102));
        jLabel13.setText("Role : ");

        GenTxt.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        GenTxt.setForeground(new java.awt.Color(153, 153, 153));

        jScrollPane7.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jScrollPane7.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        jScrollPane7.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N

        AddressTxt.setEditable(false);
        AddressTxt.setColumns(20);
        AddressTxt.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        AddressTxt.setRows(5);
        AddressTxt.setTabSize(10);
        AddressTxt.setDisabledTextColor(new java.awt.Color(153, 153, 153));
        AddressTxt.setFocusable(false);
        AddressTxt.setRequestFocusEnabled(false);
        jScrollPane7.setViewportView(AddressTxt);

        javax.swing.GroupLayout MyAccPaneLayout = new javax.swing.GroupLayout(MyAccPane);
        MyAccPane.setLayout(MyAccPaneLayout);
        MyAccPaneLayout.setHorizontalGroup(
            MyAccPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MyAccPaneLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(MyAccPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(MyAccPaneLayout.createSequentialGroup()
                        .addComponent(UpdateOrChangeBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 281, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(97, 97, 97))
                    .addGroup(MyAccPaneLayout.createSequentialGroup()
                        .addGroup(MyAccPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, MyAccPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(40, 40, 40)
                        .addGroup(MyAccPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(RoleTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(DobTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(NicTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(MobileTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(EmailTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(NameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(AppoimentTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(MyAccPaneLayout.createSequentialGroup()
                                .addGroup(MyAccPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(AdminPass)
                                    .addComponent(IdTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(20, 20, 20)
                                .addComponent(HideViewBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(MyAccPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jScrollPane7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                .addComponent(GenTxt, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 230, Short.MAX_VALUE)))))
                .addGap(20, 20, 20))
        );
        MyAccPaneLayout.setVerticalGroup(
            MyAccPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MyAccPaneLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(MyAccPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(MyAccPaneLayout.createSequentialGroup()
                        .addComponent(IdTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(MyAccPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(MyAccPaneLayout.createSequentialGroup()
                                .addGap(27, 27, 27)
                                .addComponent(HideViewBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(MyAccPaneLayout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(AdminPass, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addComponent(NameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(EmailTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(MobileTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(NicTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(DobTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(AppoimentTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(RoleTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(MyAccPaneLayout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(MyAccPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(GenTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(MyAccPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(45, 45, 45)
                .addComponent(UpdateOrChangeBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30))
        );

        MyAccScrollPane.setViewportView(MyAccPane);

        AdminMain.addTab("My Account", MyAccScrollPane);

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));
        jPanel4.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 10, true));

        AddTimeTableBtn.setBackground(new java.awt.Color(0, 102, 102));
        AddTimeTableBtn.setFont(new java.awt.Font("Times New Roman", 1, 30)); // NOI18N
        AddTimeTableBtn.setForeground(new java.awt.Color(255, 255, 255));
        AddTimeTableBtn.setText("Add Time Table");
        AddTimeTableBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddTimeTableBtnActionPerformed(evt);
            }
        });

        AddStudentBtn.setBackground(new java.awt.Color(0, 102, 102));
        AddStudentBtn.setFont(new java.awt.Font("Times New Roman", 1, 30)); // NOI18N
        AddStudentBtn.setForeground(new java.awt.Color(255, 255, 255));
        AddStudentBtn.setText("Add Students");
        AddStudentBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddStudentBtnActionPerformed(evt);
            }
        });

        AddStaffBtn.setBackground(new java.awt.Color(0, 102, 102));
        AddStaffBtn.setFont(new java.awt.Font("Times New Roman", 1, 30)); // NOI18N
        AddStaffBtn.setForeground(new java.awt.Color(255, 255, 255));
        AddStaffBtn.setText("Add Staffs");
        AddStaffBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddStaffBtnActionPerformed(evt);
            }
        });

        AddSubjectBtn.setBackground(new java.awt.Color(0, 102, 102));
        AddSubjectBtn.setFont(new java.awt.Font("Times New Roman", 1, 30)); // NOI18N
        AddSubjectBtn.setForeground(new java.awt.Color(255, 255, 255));
        AddSubjectBtn.setText("Add Subjects");
        AddSubjectBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddSubjectBtnActionPerformed(evt);
            }
        });

        AddClass.setBackground(new java.awt.Color(0, 102, 102));
        AddClass.setFont(new java.awt.Font("Times New Roman", 1, 30)); // NOI18N
        AddClass.setForeground(new java.awt.Color(255, 255, 255));
        AddClass.setText("Add Class");
        AddClass.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddClassActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(140, 140, 140)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(AddTimeTableBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(AddSubjectBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(AddStaffBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(AddStudentBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(AddClass, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(139, 139, 139))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(AddStaffBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(AddStudentBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(AddClass, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(AddSubjectBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(AddTimeTableBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30))
        );

        jScrollPane2.setViewportView(jPanel4);

        AdminMain.addTab("Administration", jScrollPane2);

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 10, true));

        jLabel25.setFont(new java.awt.Font("Times New Roman", 3, 36)); // NOI18N
        jLabel25.setForeground(new java.awt.Color(51, 204, 255));
        jLabel25.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel25.setText("School Staffs Details");

        StaffsTable.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        StaffsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "No", "ID", "Name", "Appoiment Date", "Email", "Mobile"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        StaffsTable.setRowHeight(40);
        StaffsTable.setShowGrid(true);
        StaffsTable.getTableHeader().setReorderingAllowed(false);
        StaffsTable.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                StaffsTableFocusGained(evt);
            }
        });
        StaffsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                StaffsTableMouseClicked(evt);
            }
        });
        jScrollPane8.setViewportView(StaffsTable);
        if (StaffsTable.getColumnModel().getColumnCount() > 0) {
            StaffsTable.getColumnModel().getColumn(0).setResizable(false);
            StaffsTable.getColumnModel().getColumn(0).setPreferredWidth(40);
            StaffsTable.getColumnModel().getColumn(1).setResizable(false);
            StaffsTable.getColumnModel().getColumn(1).setPreferredWidth(100);
            StaffsTable.getColumnModel().getColumn(2).setResizable(false);
            StaffsTable.getColumnModel().getColumn(2).setPreferredWidth(200);
            StaffsTable.getColumnModel().getColumn(3).setResizable(false);
            StaffsTable.getColumnModel().getColumn(3).setPreferredWidth(200);
            StaffsTable.getColumnModel().getColumn(4).setResizable(false);
            StaffsTable.getColumnModel().getColumn(4).setPreferredWidth(200);
            StaffsTable.getColumnModel().getColumn(5).setResizable(false);
            StaffsTable.getColumnModel().getColumn(5).setPreferredWidth(100);
        }
        //StaffsTable.getColumnModel().getColumn(5).

        jLabel27.setFont(new java.awt.Font("Times New Roman", 3, 24)); // NOI18N
        jLabel27.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel27.setText("Search :");

        searchStaff.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        searchStaff.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                searchStaffKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                searchStaffKeyReleased(evt);
            }
        });

        ViewBtn.setBackground(new java.awt.Color(0, 153, 153));
        ViewBtn.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        ViewBtn.setText("View");
        ViewBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ViewBtnActionPerformed(evt);
            }
        });

        modifyBtn.setBackground(new java.awt.Color(0, 153, 153));
        modifyBtn.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        modifyBtn.setText("Update / Modify");
        modifyBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modifyBtnActionPerformed(evt);
            }
        });

        DeleteBtn.setBackground(new java.awt.Color(0, 153, 153));
        DeleteBtn.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        DeleteBtn.setText("Delete");
        DeleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteBtnActionPerformed(evt);
            }
        });

        RefreshIcon.setBackground(new java.awt.Color(0, 102, 102));
        RefreshIcon.setForeground(new java.awt.Color(0, 102, 102));
        RefreshIcon.setIcon(new javax.swing.ImageIcon("F:\\UINVERSITY OF JAFFNA NOTES\\5th Semester\\SQL Project\\SchoolManagementSystem\\src\\School\\Icons\\icons8-refresh-30.png")); // NOI18N
        RefreshIcon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RefreshIconActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 973, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel27, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(8, 8, 8)
                                .addComponent(RefreshIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel25, javax.swing.GroupLayout.PREFERRED_SIZE, 776, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(searchStaff, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(20, 20, 20)
                                .addComponent(ViewBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(DeleteBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(modifyBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(30, 30, 30))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel25, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(RefreshIcon))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(searchStaff, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel27, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(ViewBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(DeleteBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(modifyBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(25, 25, 25)
                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 287, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21))
        );

        jScrollPane3.setViewportView(jPanel2);

        AdminMain.addTab("School Staffs", jScrollPane3);

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));
        jPanel5.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 10, true));
        jPanel5.setPreferredSize(new java.awt.Dimension(1120, 475));

        jLabel26.setFont(new java.awt.Font("Times New Roman", 3, 36)); // NOI18N
        jLabel26.setForeground(new java.awt.Color(51, 204, 255));
        jLabel26.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel26.setText("School Students Details");

        StudentTable.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        StudentTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "No", "ID", "Name ", "Class", "Addmission Date", "Emaill", "Mobile"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        StudentTable.setRowHeight(40);
        StudentTable.setShowGrid(true);
        StudentTable.getTableHeader().setReorderingAllowed(false);
        StudentTable.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                StudentTableFocusGained(evt);
            }
        });
        StudentTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                StudentTableMouseClicked(evt);
            }
        });
        jScrollPane11.setViewportView(StudentTable);
        if (StudentTable.getColumnModel().getColumnCount() > 0) {
            StudentTable.getColumnModel().getColumn(0).setResizable(false);
            StudentTable.getColumnModel().getColumn(0).setPreferredWidth(50);
            StudentTable.getColumnModel().getColumn(1).setResizable(false);
            StudentTable.getColumnModel().getColumn(1).setPreferredWidth(100);
            StudentTable.getColumnModel().getColumn(2).setResizable(false);
            StudentTable.getColumnModel().getColumn(2).setPreferredWidth(200);
            StudentTable.getColumnModel().getColumn(3).setResizable(false);
            StudentTable.getColumnModel().getColumn(3).setPreferredWidth(200);
            StudentTable.getColumnModel().getColumn(4).setResizable(false);
            StudentTable.getColumnModel().getColumn(4).setPreferredWidth(200);
            StudentTable.getColumnModel().getColumn(5).setResizable(false);
            StudentTable.getColumnModel().getColumn(5).setPreferredWidth(250);
            StudentTable.getColumnModel().getColumn(6).setResizable(false);
            StudentTable.getColumnModel().getColumn(6).setPreferredWidth(100);
        }

        RefreshIcon2.setBackground(new java.awt.Color(0, 102, 102));
        RefreshIcon2.setForeground(new java.awt.Color(0, 102, 102));
        RefreshIcon2.setIcon(new javax.swing.ImageIcon("F:\\UINVERSITY OF JAFFNA NOTES\\5th Semester\\SQL Project\\SchoolManagementSystem\\src\\School\\Icons\\icons8-refresh-30.png")); // NOI18N
        RefreshIcon2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RefreshIcon2ActionPerformed(evt);
            }
        });

        jLabel28.setFont(new java.awt.Font("Times New Roman", 3, 24)); // NOI18N
        jLabel28.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel28.setText("Search :");

        StudentSearch.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        StudentSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                StudentSearchKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                StudentSearchKeyReleased(evt);
            }
        });

        ViewBtn1.setBackground(new java.awt.Color(0, 153, 153));
        ViewBtn1.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        ViewBtn1.setText("View");
        ViewBtn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ViewBtn1ActionPerformed(evt);
            }
        });

        modifyBtn1.setBackground(new java.awt.Color(0, 153, 153));
        modifyBtn1.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        modifyBtn1.setText("Update / Modify");

        DeleteBtn1.setBackground(new java.awt.Color(0, 153, 153));
        DeleteBtn1.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        DeleteBtn1.setText("Delete");
        DeleteBtn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteBtn1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel28, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(StudentSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(40, 40, 40)
                        .addComponent(ViewBtn1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28)
                        .addComponent(DeleteBtn1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addComponent(modifyBtn1, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, 1055, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(RefreshIcon2, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(142, 142, 142)
                        .addComponent(jLabel26, javax.swing.GroupLayout.PREFERRED_SIZE, 587, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(20, 20, 20))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel26, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(RefreshIcon2))
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ViewBtn1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel28, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(DeleteBtn1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(modifyBtn1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(StudentSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(13, Short.MAX_VALUE))
        );

        jScrollPane4.setViewportView(jPanel5);

        AdminMain.addTab("Students", jScrollPane4);

        jPanel6.setBackground(new java.awt.Color(255, 255, 255));
        jPanel6.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 10, true));

        SelectTimetableType.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        SelectTimetableType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Time Table Type", "Teacher Time Table", "Class Time Table" }));
        SelectTimetableType.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                SelectTimetableTypeFocusGained(evt);
            }
        });
        SelectTimetableType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SelectTimetableTypeActionPerformed(evt);
            }
        });

        YearTerm.setFont(new java.awt.Font("Times New Roman", 3, 24)); // NOI18N
        YearTerm.setForeground(new java.awt.Color(153, 153, 153));

        Timetable.setFont(new java.awt.Font("Times New Roman", 0, 20)); // NOI18N
        Timetable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Monday", "Tuesday", "Wednesday", "Thursday", "Friday"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        Timetable.setRowHeight(40);
        Timetable.setShowGrid(true);
        Timetable.getTableHeader().setReorderingAllowed(false);
        jScrollPane9.setViewportView(Timetable);
        if (Timetable.getColumnModel().getColumnCount() > 0) {
            Timetable.getColumnModel().getColumn(0).setResizable(false);
            Timetable.getColumnModel().getColumn(1).setResizable(false);
            Timetable.getColumnModel().getColumn(2).setResizable(false);
            Timetable.getColumnModel().getColumn(3).setResizable(false);
            Timetable.getColumnModel().getColumn(4).setResizable(false);
        }

        teacherOrClass.setFont(new java.awt.Font("Times New Roman", 0, 20)); // NOI18N
        teacherOrClass.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select" }));
        teacherOrClass.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                teacherOrClassActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 889, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(SelectTimetableType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(50, 50, 50)
                        .addComponent(teacherOrClass, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(50, 50, 50)
                        .addComponent(YearTerm, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(45, 45, 45))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(YearTerm, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(SelectTimetableType, javax.swing.GroupLayout.DEFAULT_SIZE, 47, Short.MAX_VALUE))
                    .addComponent(teacherOrClass, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 336, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38))
        );

        LocalDate Current = LocalDate.now();
        YearTerm.setText(Current.toString());

        jScrollPane5.setViewportView(jPanel6);

        AdminMain.addTab("Time Table", jScrollPane5);

        jPanel7.setBackground(new java.awt.Color(255, 255, 255));
        jPanel7.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 10, true));

        jScrollPane1.setPreferredSize(new java.awt.Dimension(480, 402));

        ReportDetailsTable.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        ReportDetailsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "No", "Date", "Name", "Problem Details ", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Float.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        ReportDetailsTable.setRowHeight(40);
        ReportDetailsTable.setShowGrid(true);
        ReportDetailsTable.getTableHeader().setReorderingAllowed(false);
        ReportDetailsTable.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                ReportDetailsTableFocusGained(evt);
            }
        });
        ReportDetailsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ReportDetailsTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(ReportDetailsTable);
        if (ReportDetailsTable.getColumnModel().getColumnCount() > 0) {
            ReportDetailsTable.getColumnModel().getColumn(0).setResizable(false);
            ReportDetailsTable.getColumnModel().getColumn(0).setPreferredWidth(40);
            ReportDetailsTable.getColumnModel().getColumn(1).setResizable(false);
            ReportDetailsTable.getColumnModel().getColumn(1).setPreferredWidth(100);
            ReportDetailsTable.getColumnModel().getColumn(2).setResizable(false);
            ReportDetailsTable.getColumnModel().getColumn(2).setPreferredWidth(200);
            ReportDetailsTable.getColumnModel().getColumn(3).setResizable(false);
            ReportDetailsTable.getColumnModel().getColumn(3).setPreferredWidth(300);
            ReportDetailsTable.getColumnModel().getColumn(4).setResizable(false);
            ReportDetailsTable.getColumnModel().getColumn(4).setPreferredWidth(100);
        }
        //ReportDetailsTable.getColumnModel().getColumn(3).setCellEditor(new DefaultCellEditor(area));

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(51, 204, 255));
        jLabel12.setText("Report Details");

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1234, Short.MAX_VALUE))
                .addGap(30, 30, 30))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 286, Short.MAX_VALUE)
                .addGap(30, 30, 30))
        );

        jScrollPane6.setViewportView(jPanel7);

        AdminMain.addTab("Report Details", jScrollPane6);

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 10, true));
        jPanel3.setPreferredSize(new java.awt.Dimension(600, 871));

        StaffEmail.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N

        StaffPassword.setBackground(new java.awt.Color(204, 255, 255));
        StaffPassword.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        StaffPassword.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        StaffPassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StaffPasswordActionPerformed(evt);
            }
        });

        StaffMobile.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N

        jLabel21.setFont(new java.awt.Font("Times New Roman", 1, 20)); // NOI18N
        jLabel21.setForeground(new java.awt.Color(102, 102, 102));
        jLabel21.setText("Role :");

        StaffNIC.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        StaffNIC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StaffNICActionPerformed(evt);
            }
        });

        jLabel22.setFont(new java.awt.Font("Times New Roman", 1, 20)); // NOI18N
        jLabel22.setForeground(new java.awt.Color(102, 102, 102));
        jLabel22.setText("Email :");

        jScrollPane10.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N

        StaffAddress.setColumns(20);
        StaffAddress.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        StaffAddress.setRows(5);
        StaffAddress.setPreferredSize(new java.awt.Dimension(275, 109));
        jScrollPane10.setViewportView(StaffAddress);

        jLabel23.setFont(new java.awt.Font("Times New Roman", 1, 20)); // NOI18N
        jLabel23.setForeground(new java.awt.Color(102, 102, 102));
        jLabel23.setText("Mobile :");

        jLabel24.setFont(new java.awt.Font("Times New Roman", 1, 20)); // NOI18N
        jLabel24.setForeground(new java.awt.Color(102, 102, 102));
        jLabel24.setText("NIC Number :");

        jLabel15.setFont(new java.awt.Font("Times New Roman", 1, 20)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(102, 102, 102));
        jLabel15.setText("Staff ID : ");

        jLabel16.setFont(new java.awt.Font("Times New Roman", 1, 20)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(102, 102, 102));
        jLabel16.setText("Staff Password : ");

        jLabel17.setFont(new java.awt.Font("Times New Roman", 1, 20)); // NOI18N
        jLabel17.setForeground(new java.awt.Color(102, 102, 102));
        jLabel17.setText("Staff Name : ");

        jLabel14.setFont(new java.awt.Font("Times New Roman", 1, 20)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(102, 102, 102));
        jLabel14.setText("Address :");

        jLabel18.setFont(new java.awt.Font("Times New Roman", 1, 20)); // NOI18N
        jLabel18.setForeground(new java.awt.Color(102, 102, 102));
        jLabel18.setText("Gender :");

        StaffID.setBackground(new java.awt.Color(204, 255, 255));
        StaffID.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        StaffID.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        StaffID.setOpaque(true);

        jLabel19.setFont(new java.awt.Font("Times New Roman", 1, 20)); // NOI18N
        jLabel19.setForeground(new java.awt.Color(102, 102, 102));
        jLabel19.setText("Date of Birth :");

        StaffName.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N

        jLabel20.setFont(new java.awt.Font("Times New Roman", 1, 20)); // NOI18N
        jLabel20.setForeground(new java.awt.Color(102, 102, 102));
        jLabel20.setText("Appoiment Date :");

        StaffRole.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N

        HideViewBtn1.setForeground(new java.awt.Color(0, 204, 0));
        HideViewBtn1.setIcon(new javax.swing.ImageIcon("F:\\UINVERSITY OF JAFFNA NOTES\\5th Semester\\SQL Project\\SchoolManagementSystem\\src\\School\\Icons\\hide.png")); // NOI18N
        HideViewBtn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HideViewBtn1ActionPerformed(evt);
            }
        });

        StaffGender.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        StaffGender.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select the Gender", "Male", "Female" }));

        UpdateBtn.setBackground(new java.awt.Color(0, 102, 102));
        UpdateBtn.setFont(new java.awt.Font("Times New Roman", 1, 30)); // NOI18N
        UpdateBtn.setForeground(new java.awt.Color(255, 255, 255));
        UpdateBtn.setText("Update");
        UpdateBtn.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        UpdateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateBtnActionPerformed(evt);
            }
        });

        DoBUpdate.setFont(new Font("Times New Roman", 0, 18));

        AppoimentUpdate.setFont(new Font("Times New Roman", 0, 18));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addComponent(UpdateBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(185, 185, 185))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel22, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel23, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel24, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(30, 30, 30)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(StaffNIC, javax.swing.GroupLayout.DEFAULT_SIZE, 275, Short.MAX_VALUE)
                            .addComponent(StaffName, javax.swing.GroupLayout.DEFAULT_SIZE, 275, Short.MAX_VALUE)
                            .addComponent(StaffRole, javax.swing.GroupLayout.DEFAULT_SIZE, 275, Short.MAX_VALUE)
                            .addComponent(StaffGender, 0, 275, Short.MAX_VALUE)
                            .addComponent(StaffID, javax.swing.GroupLayout.DEFAULT_SIZE, 275, Short.MAX_VALUE)
                            .addComponent(StaffMobile, javax.swing.GroupLayout.DEFAULT_SIZE, 275, Short.MAX_VALUE)
                            .addComponent(StaffPassword, javax.swing.GroupLayout.DEFAULT_SIZE, 275, Short.MAX_VALUE)
                            .addComponent(DoBUpdate, javax.swing.GroupLayout.DEFAULT_SIZE, 275, Short.MAX_VALUE)
                            .addComponent(StaffEmail, javax.swing.GroupLayout.DEFAULT_SIZE, 275, Short.MAX_VALUE)
                            .addComponent(AppoimentUpdate, javax.swing.GroupLayout.DEFAULT_SIZE, 275, Short.MAX_VALUE)
                            .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                        .addGap(16, 16, 16)
                        .addComponent(HideViewBtn1, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 24, Short.MAX_VALUE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(StaffID, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(StaffPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(HideViewBtn1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(StaffName, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(StaffRole, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(StaffGender, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(DoBUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(AppoimentUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(StaffEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel22, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(StaffMobile, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel23, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(StaffNIC, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel24, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15)
                .addComponent(UpdateBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
        );

        StaffID.setEnabled(false);

        ManageAccScrollPane.setViewportView(jPanel3);

        AdminMain.addTab("Manage Account", ManageAccScrollPane);

        javax.swing.GroupLayout AdminTabLayout = new javax.swing.GroupLayout(AdminTab);
        AdminTab.setLayout(AdminTabLayout);
        AdminTabLayout.setHorizontalGroup(
            AdminTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AdminTabLayout.createSequentialGroup()
                .addGroup(AdminTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(AdminTabLayout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(AdminMain, javax.swing.GroupLayout.PREFERRED_SIZE, 785, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(AdminTabLayout.createSequentialGroup()
                        .addGap(360, 360, 360)
                        .addComponent(LogoutBtn))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, AdminTabLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 389, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(userNameDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, 340, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(20, 20, 20))
        );
        AdminTabLayout.setVerticalGroup(
            AdminTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AdminTabLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(AdminTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(userNameDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(AdminMain, javax.swing.GroupLayout.PREFERRED_SIZE, 335, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addComponent(LogoutBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(AdminTab, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(AdminTab, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void LogoutBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LogoutBtnActionPerformed
        this.dispose();
        LoginPage logout = new LoginPage();
        logout.setVisible(true);
        logout.initailsSetting("Logout Succesfully");
    }//GEN-LAST:event_LogoutBtnActionPerformed

    private void HideViewBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HideViewBtnActionPerformed
        Icon iconHide = new ImageIcon("F:\\UINVERSITY OF JAFFNA NOTES\\5th Semester\\SQL Project\\SchoolManagementSystem\\src\\School\\Icons\\hide.png");
        Icon iconView = new ImageIcon("F:\\UINVERSITY OF JAFFNA NOTES\\5th Semester\\SQL Project\\SchoolManagementSystem\\src\\School\\Icons\\view.png");

        if(HideViewBtn.getModel().isSelected()){
            AdminPass.setEchoChar((char)0);
            HideViewBtn.setIcon(iconView);
        }else{
            AdminPass.setEchoChar('*');
            HideViewBtn.setIcon(iconHide);
        }

    }//GEN-LAST:event_HideViewBtnActionPerformed

    private void UpdateOrChangeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateOrChangeBtnActionPerformed
        AdminMain.setSelectedIndex(6);
        ManageAccScrollPane.getVerticalScrollBar().setValue(0);
    }//GEN-LAST:event_UpdateOrChangeBtnActionPerformed

    private void StaffNICActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StaffNICActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_StaffNICActionPerformed

    private void HideViewBtn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HideViewBtn1ActionPerformed
        Icon iconHide = new ImageIcon("F:\\UINVERSITY OF JAFFNA NOTES\\5th Semester\\SQL Project\\SchoolManagementSystem\\src\\School\\Icons\\hide.png");
        Icon iconView = new ImageIcon("F:\\UINVERSITY OF JAFFNA NOTES\\5th Semester\\SQL Project\\SchoolManagementSystem\\src\\School\\Icons\\view.png");

        if(HideViewBtn1.getModel().isSelected()){
            StaffPassword.setEchoChar((char)0);
            HideViewBtn1.setIcon(iconView);
        }else{
            StaffPassword.setEchoChar('*');
            HideViewBtn1.setIcon(iconHide);
        }
    }//GEN-LAST:event_HideViewBtn1ActionPerformed

    private void UpdateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateBtnActionPerformed
        String s1,s2,s3,s4,s5,s6,s7,s8;
        s1 = StaffID.getText();
        s2 = String.valueOf(StaffPassword.getPassword());
        s3 = StaffName.getText();
        s4 = StaffRole.getText(); 
        s5 = StaffGender.getSelectedItem().toString();
        
        String dateofbirth = Date_Format.format(DoBUpdate.getDate());
        String Appoiment = Date_Format.format(AppoimentUpdate.getDate());
        
        java.sql.Date sd1,sd2;
        sd1 = java.sql.Date.valueOf(dateofbirth);
        sd2 =  java.sql.Date.valueOf(Appoiment);
        
        s6 = StaffEmail.getText();
        int sm1 = Integer.parseInt(StaffMobile.getText());
        s7 = StaffNIC.getText();
        s8 = StaffAddress.getText() ;
        
        if(StaffGender.getSelectedIndex() != 0){
            try {
                database.updateAdminDetails(s1, s3, s2, s4, s5, sd1, sd2, s6, sm1, s7, s8);
                setUserDetails(s1, s2);
                JOptionPane.showMessageDialog(this,"Your Details Update Successfully ");       
                AdminMain.setSelectedIndex(0);
                MyAccScrollPane.getVerticalScrollBar().setValue(0);
                setValues();
            } catch (SQLException ex) {
                Logger.getLogger(TeacherPage.class.getName()).log(Level.SEVERE, null, ex);
            }
        }else{
            JOptionPane.showMessageDialog(this,"Please Select Gender Type!!!");  
        }
                                                      
    }//GEN-LAST:event_UpdateBtnActionPerformed

    private void AddStudentBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddStudentBtnActionPerformed
        setState(JFrame.ICONIFIED);
        try {
            new AddNewStudent().setVisible(true);
        } catch (SQLException ex) {
            Logger.getLogger(AdminPage.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_AddStudentBtnActionPerformed

    private void AddStaffBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddStaffBtnActionPerformed
        setState(JFrame.ICONIFIED);
        new SelectStaffType().setVisible(true);
    }//GEN-LAST:event_AddStaffBtnActionPerformed

    private void AddSubjectBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddSubjectBtnActionPerformed
        setState(JFrame.ICONIFIED);
        AddNewSubject newSubject;
        try {
            newSubject = new AddNewSubject();
            newSubject.setVisible(true);
            
        } catch (SQLException ex) {
            Logger.getLogger(AdminPage.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_AddSubjectBtnActionPerformed

    private void ReportDetailsTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ReportDetailsTableMouseClicked
        int selectedRow = ReportDetailsTable.getSelectedRow();
        
        if(evt.getClickCount() == 2){
            String a,b,c,d,e;
            boolean CheckRow = false ;
            
            for(int i = 0; i < 5; i++ ){
                if(ReportDetailsTable.getModel().getValueAt(selectedRow, i) == null){
                    CheckRow = false;
                    break;
                }else if(ReportDetailsTable.getModel().getValueAt(selectedRow, i).toString().isBlank()){
                    CheckRow = false;
                    break;
                }else{
                    CheckRow = true;
                }    
            }
            
            if (CheckRow ){
                try {
                    a = ReportDetailsTable.getModel().getValueAt(selectedRow, 0).toString();
                    b = ReportDetailsTable.getModel().getValueAt(selectedRow, 1).toString();
                    c = ReportDetailsTable.getModel().getValueAt(selectedRow, 2).toString();
                    d = ReportDetailsTable.getModel().getValueAt(selectedRow, 3).toString();
                    e = ReportDetailsTable.getModel().getValueAt(selectedRow, 4).toString();
                    ViewReport report = new ViewReport();
                    report.initialSetting(a,b,c,d,e);
                    report.setVisible(true);
                    report.SetUserID(ConnectDatabase.ReportDetails.get(selectedRow).getReporterID());
                    
                    setReportDetais();
                } catch (SQLException ex) {
                    Logger.getLogger(AdminPage.class.getName()).log(Level.SEVERE, null, ex);
                }
            }else{
                 JOptionPane.showMessageDialog(this, "No data in this Row!!!","Not Found",NORMAL);
            }

        }
        
        
    }//GEN-LAST:event_ReportDetailsTableMouseClicked

    private void AddTimeTableBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddTimeTableBtnActionPerformed
        setState(JFrame.ICONIFIED);
        try {
            new AddNewTimeTable().setVisible(true);
        } catch (SQLException ex) {
            Logger.getLogger(AdminPage.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_AddTimeTableBtnActionPerformed

    private void AddClassActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddClassActionPerformed
        setState(JFrame.ICONIFIED);
        try {
            new AddNewClass().setVisible(true);
        } catch (SQLException ex) {
            Logger.getLogger(AdminPage.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_AddClassActionPerformed

    private void AdminTabMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AdminTabMousePressed
        // Get Mouse Position X,Y Co-Ordinates
        posX = evt.getX();
        posY = evt.getY();
    }//GEN-LAST:event_AdminTabMousePressed

    private void AdminTabMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AdminTabMouseDragged
        // Move all Frame using Mouse 
        setLocation(evt.getXOnScreen()-posX,evt.getYOnScreen()-posY);
    }//GEN-LAST:event_AdminTabMouseDragged

    private void SelectTimetableTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SelectTimetableTypeActionPerformed
        int SelectedType = SelectTimetableType.getSelectedIndex();
        /*
        *   0 - not Change 
        *   1 - Teacher
        *   2 - Student
        */
        
        if (SelectedType == 1){
            try {
                teacherOrClass.setVisible(true);
                teacherOrClass.removeAllItems();
                teacherOrClass.addItem("Select Teacher");
                // Add Teacher Drop Down Box
                ConnectDatabase.setTeachersNames();
                
                for(int i = 0; i < ConnectDatabase.Teachers.size(); i++){
                    teacherOrClass.addItem(ConnectDatabase.Teachers.get(i).getName());
                }   
            } catch (SQLException ex) {
                Logger.getLogger(AdminPage.class.getName()).log(Level.SEVERE, null, ex);
            }
        
        }else if (SelectedType == 2){
            try {
                teacherOrClass.setVisible(true);
                teacherOrClass.removeAllItems();
                teacherOrClass.addItem("Select Class");
                // Add Class Drop Down Box
                ConnectDatabase.setClassNames();
                
                for(int i = 0; i < ConnectDatabase.ClassDetails.size(); i++){
                    teacherOrClass.addItem(ConnectDatabase.ClassDetails.get(i).getName());
                }
            } catch (SQLException ex) {
                Logger.getLogger(AdminPage.class.getName()).log(Level.SEVERE, null, ex);
            }
        }else{
            teacherOrClass.setVisible(false);
        }
    }//GEN-LAST:event_SelectTimetableTypeActionPerformed

    private void StaffPasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StaffPasswordActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_StaffPasswordActionPerformed

    private void searchStaffKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchStaffKeyReleased
        hideOrViewButton( searchStaff.getText() );
        
        if(evt.getKeyCode() == KeyEvent.VK_BACK_SPACE || evt.getKeyCode() == KeyEvent.VK_DELETE || evt.getKeyCode() == KeyEvent.VK_CAPS_LOCK){
            
        }else{
            try {
                String textBoxString = searchStaff.getText();
                int textBoxStringLength = textBoxString.length();
                ConnectDatabase.addStaffs();

                for(Student data: ConnectDatabase.AllStaffsTable){
                    String  check_from_data = "";
                    
                    for(int i=0; i < textBoxStringLength; i++){
                        if(textBoxStringLength <= data.getName().length()){
                            check_from_data += data.getName().charAt(i);
                        }
                    }
                    if(check_from_data.toLowerCase().equals(textBoxString.toLowerCase()) || check_from_data.toUpperCase().equals(textBoxString.toUpperCase())){
                        searchStaff.setText(data.getName());
                        searchStaff.setSelectionStart(textBoxStringLength);
                        searchStaff.setSelectionEnd(data.getName().length());
                        break;
                    }
                }
                
            } catch (SQLException ex) {
                Logger.getLogger(AdminPage.class.getName()).log(Level.SEVERE, null, ex);
            }
        }       
    }//GEN-LAST:event_searchStaffKeyReleased

    private void StaffsTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_StaffsTableMouseClicked
        hideOrViewButton("True");
        int selectedRow = StaffsTable.getSelectedRow();
        
        if(evt.getClickCount() == 1){
            hideOrViewButton("True");
            searchStaff.setText(StaffsTable.getModel().getValueAt(selectedRow, 2).toString());
            
        }else if(evt.getClickCount() == 2){
            try {
                ViewStaffDetails();
            } catch (SQLException ex) {
                Logger.getLogger(AdminPage.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_StaffsTableMouseClicked

    private void modifyBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modifyBtnActionPerformed
        try {
            EditDetails();
        } catch (SQLException ex) {
            Logger.getLogger(AdminPage.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_modifyBtnActionPerformed

    private void ViewBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ViewBtnActionPerformed
        try {
            ViewStaffDetails();
        } catch (SQLException ex) {
            Logger.getLogger(AdminPage.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_ViewBtnActionPerformed

    private void searchStaffKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchStaffKeyPressed
        boolean check = false;
        int index = 0;
        
        DefaultTableModel StaffTableModel = (DefaultTableModel) StaffsTable.getModel();
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
            refreshButton1();
            for(int i = 0; i < StaffsTable.getRowCount(); i++){
                if(StaffsTable.getModel().getValueAt(i,2).toString().toLowerCase().equals(searchStaff.getText().toLowerCase())){
                    check = true;
                    index = Integer.parseInt(StaffsTable.getModel().getValueAt(i, 0).toString());
                    break;
                }else
                    check = false;
            }
            
            int y = Integer.parseInt(StaffsTable.getModel().getValueAt(0, 0).toString())-1;
            
            if(check  &&  y != index ){
                StaffsTable.addRowSelectionInterval(index-1,index-1 );
                StaffsTable.setSelectionBackground(Color.yellow);
                StaffsTable.setSelectionForeground(Color.black);
                int set = StaffsTable.getSelectedRow();
                StaffTableModel.moveRow(set,set, 0);
                StaffsTable.addRowSelectionInterval(0,0);

            }else if(check &&  y == index){
                StaffsTable.addRowSelectionInterval(0,0);
                StaffsTable.setSelectionBackground(Color.yellow);
                StaffsTable.setSelectionForeground(Color.black);
            }else{
                StaffsTable.addRowSelectionInterval(0,0);
                StaffsTable.setSelectionBackground(Color.WHITE);
                StaffsTable.setSelectionForeground(Color.black);
                JOptionPane.showMessageDialog(this, "Results Not Found!!!","Not Found",NORMAL);
            }
        }
    }//GEN-LAST:event_searchStaffKeyPressed

    private void DeleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteBtnActionPerformed
        int sIndex = StaffsTable.getSelectedRow();
        if(sIndex >=0){
               
            char sType = StaffsTable.getModel().getValueAt(sIndex, 1).toString().charAt(0);
            String sID = StaffsTable.getModel().getValueAt(sIndex, 1).toString();

            int result = JOptionPane.showConfirmDialog(this,"Do You Want to Delete?","Delete Staff",JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE); 

            if(result == JOptionPane.NO_OPTION){

            }else{
                if(sType == 'P' || sType == 'C'){
                    try {
                        database.deleteAdmin(sID);
                        RefreshIconActionPerformed(evt);
                    } catch (SQLException ex) {
                        Logger.getLogger(AdminPage.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }else if(sType == 'T'){
                    try {
                        database.deleteTeacher(sID);
                        RefreshIconActionPerformed(evt);
                    } catch (SQLException ex) {
                        Logger.getLogger(AdminPage.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            } 
        }else {
            JOptionPane.showMessageDialog(this, "Please Select the Row in the Table!!!","Error Message",NORMAL);
        }
        
        
    }//GEN-LAST:event_DeleteBtnActionPerformed

    private void RefreshIconActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RefreshIconActionPerformed
        searchStaff.setText("");
        hideOrViewButton("");
        refreshButton1();
    }//GEN-LAST:event_RefreshIconActionPerformed

    private void RefreshIcon2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RefreshIcon2ActionPerformed
        refreshButton2();
        hideOrViewButton1("");
        StudentSearch.setText("");
        
    }//GEN-LAST:event_RefreshIcon2ActionPerformed

    private void StudentSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_StudentSearchKeyReleased
        hideOrViewButton( StudentSearch.getText() );
        
        if(evt.getKeyCode() == KeyEvent.VK_BACK_SPACE || evt.getKeyCode() == KeyEvent.VK_DELETE || evt.getKeyCode() == KeyEvent.VK_CAPS_LOCK){
            
        }else{
            try {
                String textBoxString = StudentSearch.getText();
                int textBoxStringLength = textBoxString.length();
                ConnectDatabase.addStaffs();

                for(Student data: ConnectDatabase.StudentsDetails){
                    String  check_from_data = "";
                    
                    for(int i=0; i < textBoxStringLength; i++){
                        if(textBoxStringLength <= data.getName().length()){
                            check_from_data += data.getName().charAt(i);
                        }
                    }
                    if(check_from_data.toLowerCase().equals(textBoxString.toLowerCase()) || check_from_data.toUpperCase().equals(textBoxString.toUpperCase())){
                        StudentSearch.setText(data.getName());
                        StudentSearch.setSelectionStart(textBoxStringLength);
                        StudentSearch.setSelectionEnd(data.getName().length());
                        break;
                    }
                }
                
            } catch (SQLException ex) {
                Logger.getLogger(AdminPage.class.getName()).log(Level.SEVERE, null, ex);
            }
        } 
    }//GEN-LAST:event_StudentSearchKeyReleased

    private void StudentTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_StudentTableMouseClicked
        hideOrViewButton1("True");
        int selectedRow = StudentTable.getSelectedRow();
        
        if(evt.getClickCount() == 1){
            hideOrViewButton1("True");
            StudentSearch.setText(StudentTable.getModel().getValueAt(selectedRow, 2).toString());
            
        }else if(evt.getClickCount() == 2){
            try {
                ViewStudentDetails();
            } catch (SQLException ex) {
                Logger.getLogger(AdminPage.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_StudentTableMouseClicked

    private void StudentSearchKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_StudentSearchKeyPressed
        boolean check = false;
        int index = 0;
        
        DefaultTableModel StudentTableModel = (DefaultTableModel) StudentTable.getModel();
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
            refreshButton2();
            for(int i = 0; i<StudentTable.getRowCount(); i++){
                if(StudentTable.getModel().getValueAt(i,2).toString().toLowerCase().contains(StudentSearch.getText().toLowerCase())){
                    check = true;
                    index = Integer.parseInt(StudentTable.getModel().getValueAt(i, 0).toString());
                    break;
                }else
                    check = false;
            }
            
            
            int y = Integer.parseInt(StudentTable.getModel().getValueAt(0, 0).toString());
           
            
            if(check  &&  y != index ){
                StudentTable.addRowSelectionInterval(index-1,index-1 );
                StudentTable.setSelectionBackground(Color.yellow);
                StudentTable.setSelectionForeground(Color.black);
                int set = StudentTable.getSelectedRow();
                StudentTableModel.moveRow(set,set, 0);
                StudentTable.addRowSelectionInterval(0,0 );

            }else if(check){
                StudentTable.addRowSelectionInterval(0,0 );
                StudentTable.setSelectionBackground(Color.yellow);
                StudentTable.setSelectionForeground(Color.black);
            }else{
                JOptionPane.showMessageDialog(this, "Results Not Found!!!","Not Found",NORMAL);
            }
        }
    }//GEN-LAST:event_StudentSearchKeyPressed

    private void ViewBtn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ViewBtn1ActionPerformed
        try {
            ViewStudentDetails();
        } catch (SQLException ex) {
            Logger.getLogger(AdminPage.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_ViewBtn1ActionPerformed

    private void DeleteBtn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteBtn1ActionPerformed
        int sIndex = StudentTable.getSelectedRow();
        if(sIndex >= 0){
               
            char sType = StudentTable.getModel().getValueAt(sIndex, 1).toString().charAt(0);
            String sID = StudentTable.getModel().getValueAt(sIndex, 1).toString();

            int result = JOptionPane.showConfirmDialog(this,"Do You Want to Delete?","Delete Student",JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE); 

            if(result == JOptionPane.NO_OPTION){

            }else{
                if(sType == 'S' ){
                    try {
                        database.deleteStudent(sID);
                        RefreshIcon2ActionPerformed(evt);
                    } catch (SQLException ex) {
                        Logger.getLogger(AdminPage.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            } 
        }else {
            JOptionPane.showMessageDialog(this, "Please Select the Row in the Table!!!","Error Message",NORMAL);
        }
        
        
    }//GEN-LAST:event_DeleteBtn1ActionPerformed

    private void StaffsTableFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_StaffsTableFocusGained
        int selectedRow = StaffsTable.getSelectedRow();
        
        if(selectedRow >=0){
            hideOrViewButton("True");
            searchStaff.setText(StaffsTable.getModel().getValueAt(selectedRow, 2).toString());
        }else{
            hideOrViewButton("");
            searchStaff.setText("");
        }
        
    }//GEN-LAST:event_StaffsTableFocusGained

    private void StudentTableFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_StudentTableFocusGained
        int selectedRow = StudentTable.getSelectedRow();
        
        if(selectedRow >=0){
            hideOrViewButton("True");
            StudentSearch.setText(StudentTable.getModel().getValueAt(selectedRow, 2).toString());
        }else{
            hideOrViewButton("");
            StudentSearch.setText("");
        }
    }//GEN-LAST:event_StudentTableFocusGained

    private void ReportDetailsTableFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_ReportDetailsTableFocusGained
        try {
            setReportDetais();
        } catch (SQLException ex) {
            Logger.getLogger(AdminPage.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_ReportDetailsTableFocusGained

    private void teacherOrClassActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_teacherOrClassActionPerformed
       if(SelectTimetableType.getSelectedIndex() == 1 && teacherOrClass.getSelectedIndex() > 0){  
           try {
                // Teacher Time table
                String tid;
                tid = ConnectDatabase.Teachers.get(teacherOrClass.getSelectedIndex()-1).getId();
                setTimeTableTeacher(tid);
           } catch (SQLException ex) {
               Logger.getLogger(AdminPage.class.getName()).log(Level.SEVERE, null, ex);
           }
            
       }else if(SelectTimetableType.getSelectedIndex() == 2 && teacherOrClass.getSelectedIndex() > 0){    
            try {
                // student Timetable
                String cid;
                cid = ConnectDatabase.ClassDetails.get(teacherOrClass.getSelectedIndex()-1).getId();

                // Class Time table
                setTimeTableClass(cid);
            } catch (SQLException ex) {
               Logger.getLogger(AdminPage.class.getName()).log(Level.SEVERE, null, ex);
            
            }
            
       }else{
           for(int i=0; i< Timetable.getRowCount(); i++){
                for(int j=0; j<Timetable.getColumnCount(); j++){
                    Timetable.setValueAt("", i ,j);
                }
            }
       }
    }//GEN-LAST:event_teacherOrClassActionPerformed

    private void SelectTimetableTypeFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_SelectTimetableTypeFocusGained
        for(int i=0; i< Timetable.getRowCount(); i++){
                for(int j=0; j<Timetable.getColumnCount(); j++){
                    Timetable.setValueAt("", i ,j);
                }
            }
    }//GEN-LAST:event_SelectTimetableTypeFocusGained

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AdminPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new AdminPage().setVisible(true);
                } catch (SQLException ex) {
                    Logger.getLogger(AdminPage.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddClass;
    private javax.swing.JButton AddStaffBtn;
    private javax.swing.JButton AddStudentBtn;
    private javax.swing.JButton AddSubjectBtn;
    private javax.swing.JButton AddTimeTableBtn;
    private javax.swing.JTextArea AddressTxt;
    private javax.swing.JTabbedPane AdminMain;
    private javax.swing.JPasswordField AdminPass;
    private javax.swing.JPanel AdminTab;
    private javax.swing.JLabel AppoimentTxt;
    private com.toedter.calendar.JDateChooser AppoimentUpdate;
    private javax.swing.JButton DeleteBtn;
    private javax.swing.JButton DeleteBtn1;
    private com.toedter.calendar.JDateChooser DoBUpdate;
    private javax.swing.JLabel DobTxt;
    private javax.swing.JLabel EmailTxt;
    private javax.swing.JLabel GenTxt;
    private javax.swing.JToggleButton HideViewBtn;
    private javax.swing.JToggleButton HideViewBtn1;
    private javax.swing.JLabel IdTxt;
    private javax.swing.JButton LogoutBtn;
    private javax.swing.JScrollPane ManageAccScrollPane;
    private javax.swing.JLabel MobileTxt;
    private javax.swing.JPanel MyAccPane;
    private javax.swing.JScrollPane MyAccScrollPane;
    private javax.swing.JLabel NameTxt;
    private javax.swing.JLabel NicTxt;
    private javax.swing.JButton RefreshIcon;
    private javax.swing.JButton RefreshIcon2;
    private javax.swing.JTable ReportDetailsTable;
    private javax.swing.JTextArea area;
    private javax.swing.JLabel RoleTxt;
    private javax.swing.JComboBox<String> SelectTimetableType;
    private javax.swing.JTextArea StaffAddress;
    private javax.swing.JTextField StaffEmail;
    private javax.swing.JComboBox<String> StaffGender;
    private javax.swing.JLabel StaffID;
    private javax.swing.JTextField StaffMobile;
    private javax.swing.JTextField StaffNIC;
    private javax.swing.JTextField StaffName;
    private javax.swing.JPasswordField StaffPassword;
    private javax.swing.JTextField StaffRole;
    private javax.swing.JTable StaffsTable;
    private javax.swing.JTextField StudentSearch;
    private javax.swing.JTable StudentTable;
    private javax.swing.JTable Timetable;
    private javax.swing.JButton UpdateBtn;
    private javax.swing.JButton UpdateOrChangeBtn;
    private javax.swing.JButton ViewBtn;
    private javax.swing.JButton ViewBtn1;
    private javax.swing.JLabel YearTerm;
    private javax.swing.JFrame jFrame1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JButton modifyBtn;
    private javax.swing.JButton modifyBtn1;
    private javax.swing.JTextField searchStaff;
    private javax.swing.JComboBox<String> teacherOrClass;
    private javax.swing.JLabel userNameDisplay;
    // End of variables declaration//GEN-END:variables
    
    /*
    *   Hide or view the View Button and Modify/Update Button
    */
    private void hideOrViewButton(String s){
         
        if(s.isBlank()){
            ViewBtn.setVisible(false);
            modifyBtn.setVisible(false);
            DeleteBtn.setVisible(false);
        }else{
            ViewBtn.setVisible(true);
            modifyBtn.setVisible(true);
            DeleteBtn.setVisible(true);
        }
    }
    
    private void hideOrViewButton1(String s){
         
        if(s.isBlank()){
            ViewBtn1.setVisible(false);
            modifyBtn1.setVisible(false);
            DeleteBtn1.setVisible(false);
        }else{
            ViewBtn1.setVisible(true);
            modifyBtn1.setVisible(true);
            DeleteBtn1.setVisible(true);
        }
    }
    
    /*
    *   Edit the Selected Staff Details
    */
    private void EditDetails() throws SQLException{
        String sID;
        int selectedRow;
        
        if(!StaffsTable.getSelectionModel().isSelectionEmpty()){
            selectedRow = StaffsTable.getSelectedRow();
            sID = StaffsTable.getModel().getValueAt(selectedRow, 1).toString();
            AddNewStaffs updateStaff = new AddNewStaffs();
            updateStaff.setVisible(true);
            updateStaff.modifyStaffs(sID);
        }else {
            JOptionPane.showMessageDialog(this, "Please Select the Row in the Table!!!","Error Message",NORMAL);
        }
    }
    
    /*
    *   View the Selected Staff Details
    */
    public void ViewStaffDetails() throws SQLException{
        int selectedRow;
        String sID = null;
        if(!searchStaff.getText().isBlank() && !searchStaff.getText().isEmpty()){
            for(int i=0; i < ConnectDatabase.AllStaffsTable.size(); i++){
                if(ConnectDatabase.AllStaffsTable.get(i).getName().equals(searchStaff.getText())){
                    sID = ConnectDatabase.AllStaffsTable.get(i).getId();
                    break;
                }
            }
            ViewStaffsDetails viewStaff = new ViewStaffsDetails();
            viewStaff.setVisible(true);
            viewStaff.initialSetting(sID);
            
        }else if(!StaffsTable.getSelectionModel().isSelectionEmpty()){
            selectedRow = StaffsTable.getSelectedRow();
            sID = StaffsTable.getModel().getValueAt(selectedRow, 1).toString();
            ViewStaffsDetails viewStaff = new ViewStaffsDetails();
            viewStaff.setVisible(true);
            viewStaff.initialSetting(sID);
        }else {
            JOptionPane.showMessageDialog(this, "Please Select the Row in the Table!!!","Error Message",NORMAL);
        } 
    }
    /*
    *   View the Selected Student Details
    */
    public void ViewStudentDetails() throws SQLException{
        int selectedRow;
        String sID = null;
        if(!StudentSearch.getText().isBlank()){
            
            for(int i=0; i < ConnectDatabase.StudentsDetails.size(); i++){
                if(ConnectDatabase.StudentsDetails.get(i).getName().equals(StudentSearch.getText())){
                    sID = ConnectDatabase.StudentsDetails.get(i).getId();
                    break;
                }
            }
            ViewStudentDetails viewStudent = new ViewStudentDetails();
            viewStudent.setVisible(true);

            viewStudent.initialSetting(sID);
            
        }else if(!StudentTable.getSelectionModel().isSelectionEmpty()){
            selectedRow = StudentTable.getSelectedRow();
            sID = StudentTable.getModel().getValueAt(selectedRow, 1).toString();
            ViewStudentDetails viewStudent = new ViewStudentDetails();
            viewStudent.setVisible(true);
            viewStudent.initialSetting(sID);
        }else {
            JOptionPane.showMessageDialog(this, "Please Select the Row in the Table!!!","Error Message",NORMAL);
        }
    }
    
    /*
    *   Display Staffs Details in the School Staffs Tab
    */
    private void setStaffsDetais() throws SQLException{
        ConnectDatabase.AllStaffsTable.clear();
        ConnectDatabase.addStaffs();
        DefaultTableModel StaffTableModel = (DefaultTableModel) StaffsTable.getModel();
        
        int No;
        String Id, Name , Appoment, Email, Mobile;
            
        for(int i = 0; i<ConnectDatabase.AllStaffsTable.size(); i++){
            No = i+1;
            Id = ConnectDatabase.AllStaffsTable.get(i).getId() ;
            Name = ConnectDatabase.AllStaffsTable.get(i).getName() ;
            Appoment = ConnectDatabase.AllStaffsTable.get(i).getAppoinmentDate() ;
            Email = ConnectDatabase.AllStaffsTable.get(i).getEmail() ;
            Mobile = ConnectDatabase.AllStaffsTable.get(i).getMobile() ;
            
            StaffTableModel.addRow(new Object[]{
                No,Id,Name,Appoment,Email,Mobile
            });
        }
        
    }
    
    
    /*
    *   Display Student Details in the Student Tab
    */
    private void setStudentsDetais() throws SQLException{
        ConnectDatabase.StudentsDetails.clear();
        
        ConnectDatabase.getAllStudents();
        
        DefaultTableModel StaffTableModel = (DefaultTableModel) StudentTable.getModel();
        
        int No;
        String Id, Name , Class, Admission, Email, Mobile;
            
        for(int i = 0; i<ConnectDatabase.StudentsDetails.size(); i++){
            No = i+1;
            Id = ConnectDatabase.StudentsDetails.get(i).getId() ;
            Name = ConnectDatabase.StudentsDetails.get(i).getName() ;
            Class = database.getClassName(ConnectDatabase.StudentsDetails.get(i).getClassID());
            Admission = ConnectDatabase.StudentsDetails.get(i).getAddmissionDate();
            Email = ConnectDatabase.StudentsDetails.get(i).getEmail() ;
            Mobile = ConnectDatabase.StudentsDetails.get(i).getMobile() ;
            
            StaffTableModel.addRow(new Object[]{
                No,Id,Name,Class,Admission,Email,Mobile
            });
        }
        
    }
    
    
    private void setReportDetais() throws SQLException{
        int No;
        String date, Name , Problem, status;
        
        DefaultTableModel ReportTableModel = (DefaultTableModel) ReportDetailsTable.getModel();
        int rowCount = ReportDetailsTable.getRowCount();
        //Remove rows one by one from the end of the table
        for (int i = rowCount - 1; i >= 0; i--) {
            ReportTableModel.removeRow(i);
        }
        
        ReportDetailsTable.setCellSelectionEnabled(true);
        ReportDetailsTable.setRowSelectionAllowed(true);
        ConnectDatabase.getReportDetails();
        
        for(int i = 0; i<ConnectDatabase.ReportDetails.size(); i++){
            No = i+1;
            date = ConnectDatabase.ReportDetails.get(i).getrDate();
            Name = ConnectDatabase.getUserName(ConnectDatabase.ReportDetails.get(i).getReporterID()) ;
            Problem = ConnectDatabase.ReportDetails.get(i).getrProblem() ;
            status = ConnectDatabase.ReportDetails.get(i).getrStatus() ;
            
            ReportTableModel.addRow(new Object[]{
                No,date,Name,Problem,status
            });
            
        }
    }
    
    public void refreshButton1(){
        DefaultTableModel dm = (DefaultTableModel) StaffsTable.getModel();
        int rowCount = StaffsTable.getRowCount();
        //Remove rows one by one from the end of the table
        for (int i = rowCount - 1; i >= 0; i--) {
            dm.removeRow(i);
        }
        
        try {
            setStaffsDetais();
        } catch (SQLException ex) {
            Logger.getLogger(AdminPage.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public void refreshButton2(){
    DefaultTableModel dm = (DefaultTableModel) StudentTable.getModel();
        int rowCount = StudentTable.getRowCount();
        //Remove rows one by one from the end of the table
        for (int i = rowCount - 1; i >= 0; i--) {
            dm.removeRow(i);
        }
        try {
            setStudentsDetais();
        } catch (SQLException ex) {
            Logger.getLogger(AdminPage.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public void setTimeTableClass(String cid) throws SQLException{
//            viewStudentTimeTable(String cID, String day, int period)
        String weekDays[] = {"Monday", "Tuesday","Wednesday","Thursday","Friday"};
        int colValue = Timetable.getColumnCount();
        int rowValue = Timetable.getRowCount();  
        String s;
        int period = 0;
        for(int i = 0; i< rowValue; i++){
            for(int j = 0; j< colValue; j++){
                period = i+1;
                s = ConnectDatabase.viewStudentTimeTable(cid,weekDays[j],period);
                Timetable.setValueAt(s, i, j);
            }
        }
    }
    public void setTimeTableTeacher(String cid) throws SQLException{
//            viewStudentTimeTable(String cID, String day, int period)
        String weekDays[] = {"Monday", "Tuesday","Wednesday","Thursday","Friday"};
        int colValue = Timetable.getColumnCount();
        int rowValue = Timetable.getRowCount();  
        String s;
        int period = 0;
        for(int i = 0; i< rowValue; i++){
            for(int j = 0; j< colValue; j++){
                period = i+1;
                s = ConnectDatabase.viewTeacherTimeTable(cid,weekDays[j],period);
                Timetable.setValueAt(s, i, j);
            }
        }
    }
    
}
