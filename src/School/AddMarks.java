/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package School;


import java.awt.Color;
import static java.awt.Frame.NORMAL;
import java.sql.SQLException;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;
import org.jdesktop.swingx.autocomplete.AutoCompleteDecorator;
/**
 *
 * @author Kajamohan
 */
public class AddMarks extends javax.swing.JFrame {

    /**
     * Creates new form AddMarks
     */
    private int posX, posY;
    private final ConnectDatabase database = new ConnectDatabase();
    
    public AddMarks() throws SQLException {
        initComponents();
        initialSetting();
        AutoCompleteDecorator.decorate(SelectClass);
        AutoCompleteDecorator.decorate(SelectSubject);
        AutoCompleteDecorator.decorate(SelectTerm);
    }

    public void initialSetting() throws SQLException{
        HeaderSetting h1 =  new HeaderSetting();
        h1.theader(MarksTable.getTableHeader());  
        h1.HeaderRenderer(MarksTable);
        
        MarksTable.setColumnSelectionAllowed(false);
        MarksTable.setRowSelectionAllowed(false);
        MarksTable.setCellSelectionEnabled(true);
        
        MarksTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
       
        // Add Class Drop Down Box
        ConnectDatabase.setClassNames();
        for(int i = 0; i < ConnectDatabase.ClassDetails.size(); i++){
            SelectClass.addItem(ConnectDatabase.ClassDetails.get(i).getName());
        }
        
        if (YearTxt.getText().isEmpty()) {
            YearTxt.setForeground(Color.GRAY);
            YearTxt.setText("Year");
            YearTxt.setBackground(new Color(255,255,255));
        }
        
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        CloseBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        SelectClass = new javax.swing.JComboBox<>();
        SelectSubject = new javax.swing.JComboBox<>();
        SelectTerm = new javax.swing.JComboBox<>();
        YearTxt = new javax.swing.JTextField();
        ResetBtn = new javax.swing.JButton();
        AddMarksBtn = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        MarksTable = new javax.swing.JTable();
        viewStudent = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 153, 153), 10, true));
        jPanel1.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                jPanel1MouseDragged(evt);
            }
        });
        jPanel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jPanel1MousePressed(evt);
            }
        });

        CloseBtn.setBackground(new java.awt.Color(0, 153, 153));
        CloseBtn.setFont(new java.awt.Font("Times New Roman", 1, 30)); // NOI18N
        CloseBtn.setText("Close");
        CloseBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CloseBtnActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 153, 153));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Add Subject Marks");

        SelectClass.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        SelectClass.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Class" }));
        SelectClass.setToolTipText("Select Class");
        SelectClass.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SelectClassActionPerformed(evt);
            }
        });

        SelectSubject.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        SelectSubject.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Subject" }));
        SelectSubject.setToolTipText("Select Subject");

        SelectTerm.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        SelectTerm.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Term" }));
        SelectTerm.setToolTipText("Seltect Term");

        YearTxt.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        YearTxt.setToolTipText("Year");
        YearTxt.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                YearTxtFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                YearTxtFocusLost(evt);
            }
        });
        YearTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                YearTxtKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                YearTxtKeyReleased(evt);
            }
        });

        ResetBtn.setBackground(new java.awt.Color(0, 153, 153));
        ResetBtn.setFont(new java.awt.Font("Times New Roman", 1, 30)); // NOI18N
        ResetBtn.setText("Reset");
        ResetBtn.setToolTipText("");
        ResetBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ResetBtnActionPerformed(evt);
            }
        });

        AddMarksBtn.setBackground(new java.awt.Color(0, 153, 153));
        AddMarksBtn.setFont(new java.awt.Font("Times New Roman", 1, 30)); // NOI18N
        AddMarksBtn.setText("Add Marks");
        AddMarksBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddMarksBtnActionPerformed(evt);
            }
        });

        MarksTable.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        MarksTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "No", "Name", "Marks"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Float.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        MarksTable.setRowHeight(40);
        MarksTable.setShowGrid(true);
        MarksTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(MarksTable);
        if (MarksTable.getColumnModel().getColumnCount() > 0) {
            MarksTable.getColumnModel().getColumn(0).setResizable(false);
            MarksTable.getColumnModel().getColumn(0).setPreferredWidth(50);
            MarksTable.getColumnModel().getColumn(1).setResizable(false);
            MarksTable.getColumnModel().getColumn(1).setPreferredWidth(250);
            MarksTable.getColumnModel().getColumn(2).setResizable(false);
            MarksTable.getColumnModel().getColumn(2).setPreferredWidth(100);
        }

        viewStudent.setBackground(new java.awt.Color(0, 153, 153));
        viewStudent.setFont(new java.awt.Font("Times New Roman", 1, 30)); // NOI18N
        viewStudent.setText("View Students");
        viewStudent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewStudentActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(SelectClass, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(46, 46, 46)
                                .addComponent(SelectSubject, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(47, 47, 47)
                                .addComponent(SelectTerm, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(51, 51, 51)
                                .addComponent(YearTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(viewStudent)
                                .addGap(44, 44, 44)
                                .addComponent(AddMarksBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(45, 45, 45)
                                .addComponent(ResetBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(44, 44, 44)
                                .addComponent(CloseBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 854, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(216, 216, 216)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 466, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(30, 30, 30))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(YearTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SelectSubject, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SelectClass, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SelectTerm, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 319, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(AddMarksBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(CloseBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ResetBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(viewStudent, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(36, 36, 36))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jPanel1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MousePressed
        // Get Mouse Position X,Y Co-Ordinates
        posX = evt.getX();
        posY = evt.getY();
    }//GEN-LAST:event_jPanel1MousePressed

    private void jPanel1MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MouseDragged
        // Move all Frame using Mouse 
        setLocation(evt.getXOnScreen()-posX,evt.getYOnScreen()-posY);
    }//GEN-LAST:event_jPanel1MouseDragged

    private void CloseBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CloseBtnActionPerformed
        this.dispose();
    }//GEN-LAST:event_CloseBtnActionPerformed

    private void ResetBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ResetBtnActionPerformed
        
        SelectClass.setSelectedIndex(0);
        SelectSubject.setSelectedIndex(0);
        SelectTerm.setSelectedIndex(0);
        YearTxt.setText("");
        YearTxt.setBackground(new Color(255,255,255));
        
        
        DefaultTableModel dm = (DefaultTableModel) MarksTable.getModel();
        int rowCount = MarksTable.getRowCount();
        //Remove rows one by one from the end of the table
        for (int i = rowCount - 1; i >= 0; i--) {
            dm.removeRow(i);
        }
        
        if (YearTxt.getText().isEmpty()) {
            YearTxt.setForeground(Color.GRAY);
            YearTxt.setText("Year");
            YearTxt.setBackground(new Color(255,255,255));
        }
    }//GEN-LAST:event_ResetBtnActionPerformed

    @SuppressWarnings("deprecation")
    private void YearTxtKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_YearTxtKeyReleased
        // contains only digits
        String regex = "[0-9]+";
        Pattern pattern = Pattern.compile(regex); 
        Matcher isYearMatched = pattern.matcher(YearTxt.getText()); 
        
        Date d = new Date();
        
        
        if(!isYearMatched.matches()){
            YearTxt.requestFocus();
            YearTxt.setBackground(new Color(255,106,83));

        }else{
            int y = Integer.parseInt(YearTxt.getText()) ;
            if( y < 1901 || y > (d.getYear()+1900) ){

                YearTxt.requestFocus();
                YearTxt.setBackground(new Color(255,106,83));
            }else
                YearTxt.setBackground(new Color(255,255,255));
            
        }
    }//GEN-LAST:event_YearTxtKeyReleased

    private void YearTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_YearTxtKeyPressed
        
        
    }//GEN-LAST:event_YearTxtKeyPressed

    private void AddMarksBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddMarksBtnActionPerformed
        
        if( checkValues() &&  (SelectClass.getSelectedIndex()) >0 &&  checkTableValues()){
            try {
                callYesNo();
            } catch (SQLException ex) {
                Logger.getLogger(AddMarks.class.getName()).log(Level.SEVERE, null, ex);
                setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            }
        }
    }//GEN-LAST:event_AddMarksBtnActionPerformed

    private void SelectClassActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SelectClassActionPerformed
        try {   
            int sClass;
            int rowCount = MarksTable.getRowCount();
            DefaultTableModel dm = (DefaultTableModel) MarksTable.getModel();

            for (int i = rowCount - 1; i >= 0; i--) {
                dm.removeRow(i);
            }
            
            sClass = SelectClass.getSelectedIndex();
            
            if(sClass>0){
                displayStudents(ConnectDatabase.ClassDetails.get(sClass-1).getId());
            
            
                SelectTerm.removeAllItems();
                SelectTerm.addItem("Select Term");
                //  Add Term Drop Down Box
                ConnectDatabase.setTerms();
                ConnectDatabase.Terms.forEach(terms -> {
                    SelectTerm.addItem(terms);
                }); 
            
                SelectSubject.removeAllItems();
                SelectSubject.addItem("Select Subject");
            
                String cID =  ConnectDatabase.ClassDetails.get(SelectClass.getSelectedIndex()-1).getId();
                
                ConnectDatabase.setSubjectsNames(cID);
                for(int i = 0; i < ConnectDatabase.SubjectDetails.size(); i++){
                    SelectSubject.addItem(ConnectDatabase.SubjectDetails.get(i).getName());
                }
            }
            
        } catch (SQLException ex) {
            Logger.getLogger(AddMarks.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_SelectClassActionPerformed

    private void YearTxtFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_YearTxtFocusLost
        if (YearTxt.getText().isEmpty()) {
            YearTxt.setForeground(Color.GRAY);
            YearTxt.setText("Year");
            YearTxt.setBackground(new Color(255,255,255));
        }
    }//GEN-LAST:event_YearTxtFocusLost

    private void YearTxtFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_YearTxtFocusGained
        if (YearTxt.getText().equals("Year")) {
            YearTxt.setText("");
            YearTxt.setForeground(Color.BLACK);
            YearTxt.setBackground(new Color(255,255,255));
        }
    }//GEN-LAST:event_YearTxtFocusGained

    private void viewStudentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewStudentActionPerformed
        int sClass;
        int rowCount = MarksTable.getRowCount();
        DefaultTableModel dm = (DefaultTableModel) MarksTable.getModel();
        
        for (int i = rowCount - 1; i >= 0; i--) {
            dm.removeRow(i);
        }

        sClass = SelectClass.getSelectedIndex();
        if(checkValues() || sClass>0){

            try {
                displayStudents(ConnectDatabase.ClassDetails.get(sClass-1).getId());
            } catch (SQLException ex) {
                Logger.getLogger(AddMarks.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
    }//GEN-LAST:event_viewStudentActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AddMarks.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AddMarks.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AddMarks.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AddMarks.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new AddMarks().setVisible(true);
                } catch (SQLException ex) {
                    Logger.getLogger(AddMarks.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddMarksBtn;
    private javax.swing.JButton CloseBtn;
    private javax.swing.JTable MarksTable;
    private javax.swing.JButton ResetBtn;
    private javax.swing.JComboBox<String> SelectClass;
    private javax.swing.JComboBox<String> SelectSubject;
    private javax.swing.JComboBox<String> SelectTerm;
    private javax.swing.JTextField YearTxt;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton viewStudent;
    // End of variables declaration//GEN-END:variables
    
    @SuppressWarnings("deprecation")
    public boolean checkValues(){
        int sClass,sSubject,sTerm, sYear;
        sClass = SelectClass.getSelectedIndex();
        sSubject = SelectSubject.getSelectedIndex();
        sTerm = SelectTerm.getSelectedIndex();
        
        Date d = new Date();
        
        // contains only digits
        String regex = "[0-9]+";
        Pattern pattern = Pattern.compile(regex); 
        Matcher isYearMatched = pattern.matcher(YearTxt.getText()); 
        boolean b;
        
        if(sClass == 0){
            SelectClass.requestFocus();
            JOptionPane.showMessageDialog(this, "Please Select the Class!!!","Error Message",NORMAL);
            b = false;
        }else if(sSubject == 0){
            SelectSubject.requestFocus();
            JOptionPane.showMessageDialog(this, "Please Select the Subject!!!","Error Message",NORMAL);
            b = false;
        }else if(sTerm == 0){
            SelectTerm.requestFocus();
            JOptionPane.showMessageDialog(this, "Please Select the Term!!!","Error Message",NORMAL);
            b = false;
        }else if(isYearMatched.matches()) {
            sYear = Integer.parseInt(YearTxt.getText());
            if(sYear < 1901 || sYear > (d.getYear()+1900) || YearTxt.getText().length() != 4 ){
                YearTxt.requestFocus();
                JOptionPane.showMessageDialog(this, "Please Enter the Correct Year!!!","Error Message",NORMAL);
                b = false;
            }else{
                b = true;
            }
        }else if(!isYearMatched.matches()){
            YearTxt.requestFocus();
            JOptionPane.showMessageDialog(this, "Please Enter the Correct Year!!!","Error Message",NORMAL);
            b =  false;
        }else{
            b =  true;
        }
        
       
        return b;
        
    }
    
    private boolean checkTableValues(){
        int rowValue = MarksTable.getRowCount();
        float marks;
        boolean b = false;
        
        for (int i = 0; i < rowValue; i++) {  
            marks = Float.parseFloat(MarksTable.getModel().getValueAt(i, 2).toString());
            if( MarksTable.getModel().getValueAt(i, 2) == null ){
                b =  false;
                JOptionPane.showMessageDialog(this, "Please Enter the Student Marks!!!","Error Message",NORMAL);
                break;
            }else if(marks < 0 || marks >= 100){
                b =  false;
                JOptionPane.showMessageDialog(this, "Please Check the Student Marks!!!","Error Message",NORMAL);
                break;
            }
            b = true;
        }
        return b;       
    }
    
    public void displayStudents(String cID) throws SQLException{
        
        ConnectDatabase.GetStudentsforMarks(cID);
        DefaultTableModel StaffTableModel = (DefaultTableModel) MarksTable.getModel();
        int No;
        String  Name;
        for(int i = 0; i < ConnectDatabase.StudentsDetails.size(); i++){
            No = i+1;
            Name = ConnectDatabase.StudentsDetails.get(i).getName() ;
            StaffTableModel.addRow(new Object[]{
                No,Name
            });
        }
    }
    
    public void buttonVisible(){
        if(checkValues()){
            AddMarksBtn.setVisible(true);
            ResetBtn.setVisible(true);
        }else{
           AddMarksBtn.setVisible(false);
           ResetBtn.setVisible(false); 
        }
    }
    
    private void callYesNo() throws SQLException{
        int result = JOptionPane.showConfirmDialog(this,"Students Marks Added Successfully\nDo You Want to add Another Marks?","Students Marks",JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE); 
                
        if(result == JOptionPane.NO_OPTION){
            addMarksInDatabase();
            this.dispose();
        }else{
            addMarksInDatabase();
            DefaultTableModel dm = (DefaultTableModel) MarksTable.getModel();
            int rowCount = MarksTable.getRowCount();
          
            SelectClass.setSelectedIndex(0);
            SelectSubject.setSelectedIndex(0);
            SelectTerm.setSelectedIndex(0);
            YearTxt.setText("");
            YearTxt.setBackground(new Color(255,255,255));
            
        //Remove rows one by one from the end of the table
            for (int i = rowCount - 1; i >= 0; i--) {
                dm.removeRow(i);
            }
        
        }
    }
    
    public void addMarksInDatabase() throws SQLException{
        DefaultTableModel dm = (DefaultTableModel) MarksTable.getModel();
        int rowCount = MarksTable.getRowCount();
        int year,term;
        float marks;
        String stdID,subID;
        
        subID = ConnectDatabase.SubjectDetails.get(SelectSubject.getSelectedIndex()-1).getId();
        year = Integer.parseInt(YearTxt.getText());
        term = SelectTerm.getSelectedIndex();
        
        for(int i = 0; i < rowCount; i++){
            stdID = ConnectDatabase.StudentsDetails.get(i).getId();
            marks = Float.parseFloat(dm.getValueAt(i, 2).toString());
            database.addMarks(stdID, subID, year, term, marks); 
        }
        
            
    }
}
